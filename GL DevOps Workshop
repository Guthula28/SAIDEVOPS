git clone https://github.com/spring-projects/spring-petclinic.git

     ls
     cd spring-petclinic/
     ls
     vim Dockerfile
     # Stage 1: Build the Java application using Maven
    FROM maven:3.9.6-eclipse-temurin-21-alpine AS build

    # Set the working directory inside the build stage container
    WORKDIR /app

    # Copy the Maven project file (pom.xml) first to leverage Docker caching for dependencies
    # This layer changes only if pom.xml changes, allowing faster rebuilds if only code changes
    COPY pom.xml .

    # Download project dependencies (this step will be cached unless pom.xml changes)
    RUN mvn dependency:go-offline

    # Copy the rest of the application source code
    COPY src ./src

    # Package the application into a JAR file
    # -DskipTests is used to skip running tests during the Docker build,
    # as tests are usually run in a separate CI/CD stage.
    RUN mvn clean package -DskipTests

    # Stage 2: Create the final, smaller runtime image
    # Using a JRE-only image for running the application, as we don't need build tools here
    FROM eclipse-temurin:21-jre-alpine AS final

    # Set the working directory for the final application
    WORKDIR /app

    # Copy the executable JAR file from the 'build' stage into the final image
    # The *.jar wildcard assumes your Maven build produces a single JAR in the target directory
    # Spring Petclinic typically produces a JAR like 'spring-petclinic-X.Y.Z-SNAPSHOT.jar'
    COPY --from=build /app/target/*.jar app.jar

    # Expose the port your Java application listens on (Spring Boot default is 8080)
    EXPOSE 8080

    # Command to run the Java application when the container starts
    CMD ["java", "-jar", "app.jar"]

     docker build -t spring-petclinic-app:1.0 .
     docker images
     docker run -d -p 8080:8080 --name petclinic-container spring-petclinic-app:1.0
     Access using localhost:8080
     docker ps
     docker logs petclinic-container
